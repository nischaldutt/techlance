import React from "react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Spin } from "antd";
import { dehydrate, QueryClient } from "@tanstack/react-query";

import { Footer } from "@/components";
import { APP_CONSTANTS } from "@/constants";
import { getCategories, getSubCategories } from "@/services/customerServices";
import {
  useCategories,
  useSubCategories,
  useSubCategoriesWithCategoryId,
} from "@/hooks";

export async function getStaticProps() {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery(
    [APP_CONSTANTS.QUERY_KEYS.CUSTOMER.CATEGORIES],
    getCategories
  );
  await queryClient.prefetchQuery(
    [APP_CONSTANTS.QUERY_KEYS.CUSTOMER.SUB_CATEGORIES],
    getSubCategories
  );

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}

export default function Categories() {
  const { categories } = useCategories();
  const { subCategories } = useSubCategories();

  const [categoryId, setCategoryId] = React.useState(null);
  const [currentSubCategories, setCurrentSubCategories] =
    React.useState(subCategories);

  const { subCategoriesWithCategoryId, isSuccess, isFetching, isError } =
    useSubCategoriesWithCategoryId(categoryId);

  React.useEffect(() => {
    if (isSuccess) {
      setCurrentSubCategories(subCategoriesWithCategoryId);
    }
  }, [subCategoriesWithCategoryId, isSuccess]);

  return (
    <>
      <Head>
        <title>TechLance</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col justify-between min-h-[100vh]">
        <main>
          <section className="px-4 py-20 bg-gray-100 flex justify-center">
            <div className="w-full grid grid-cols-[repeat(2,_minmax(0,_128px))]  xs:grid-cols-[repeat(3,_minmax(0,_128px))] lg:grid-cols-[repeat(6,_minmax(0,_128px))] justify-center gap-6">
              {categories.map((category) => {
                return (
                  <div key={category.id} className="py-4">
                    <Category
                      id={category.id}
                      icon={category.icon_url}
                      label={category.name}
                      onToggle={() => setCategoryId(category?.id)}
                      activeId={categoryId}
                    />
                  </div>
                );
              })}
            </div>
          </section>

          <Spin spinning={isFetching}>
            <section className="px-4 py-12 bg-white flex justify-center">
              <section className="w-full grid grid-cols-[repeat(1,_minmax(0,_275px))] sm:grid-cols-[repeat(2,_minmax(0,_275px))] lg:grid-cols-[repeat(3,_minmax(0,_275px))] justify-center gap-6">
                {currentSubCategories.map((subCategory) => {
                  return (
                    <SubCategory
                      key={subCategory.id}
                      name={subCategory.name}
                      image="https://images.unsplash.com/photo-1569698134101-f15cde5cd66c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80"
                    />
                  );
                })}
              </section>
            </section>
          </Spin>
        </main>

        <Footer />
      </div>
    </>
  );
}

function Category({ id, icon, label, onToggle, activeId }) {
  const activeStyles =
    id === activeId
      ? "scale-125 bg-primary-100 text-white"
      : "scale-100 bg-white text-black";

  return (
    <div
      className={`${activeStyles}  select-none rounded-lg flex flex-col justify-center items-center w-32 py-6 shadow-md hover:shadow-lg cursor-pointer transform transition duration-500`}
      onClick={() => onToggle(label.toLowerCase())}
    >
      {icon}
      <div className="pt-4 font-semibold">{label}</div>
    </div>
  );
}

function SubCategory({ name, image }) {
  return (
    <section className="group flex justify-center select-none w-[275px] transform transition duration-500 hover:-translate-y-2">
      <div className="rounded-lg bg-white max-w-sm">
        <Link href="/categories/hair-salon">
          <a>
            <div className="relative">
              <Image
                className="rounded-lg"
                src={image}
                alt={name}
                width={275}
                height={180}
                objectFit="cover"
              />

              <div className="absolute bottom-1 rounded-bl-lg rounded-br-lg left-0 right-0 text-white text-right p-4 bg-gradient-to-t from-zinc-900 to-transparent">
                <div className="font-bold text-lg transform transition duration-500 group-hover:-translate-y-2">
                  {name}
                </div>
              </div>
            </div>
          </a>
        </Link>
      </div>
    </section>
  );
}
